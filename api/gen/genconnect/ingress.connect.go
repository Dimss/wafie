// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ingress.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/Dimss/cwaf/api/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IngressName is the fully-qualified name of the Ingress service.
	IngressName = "proto.Ingress"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IngressCreateIngressProcedure is the fully-qualified name of the Ingress's CreateIngress RPC.
	IngressCreateIngressProcedure = "/proto.Ingress/CreateIngress"
)

// IngressClient is a client for the proto.Ingress service.
type IngressClient interface {
	CreateIngress(context.Context, *connect.Request[gen.CreateIngressRequest]) (*connect.Response[gen.CreateIngressResponse], error)
}

// NewIngressClient constructs a client for the proto.Ingress service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIngressClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IngressClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ingressMethods := gen.File_ingress_proto.Services().ByName("Ingress").Methods()
	return &ingressClient{
		createIngress: connect.NewClient[gen.CreateIngressRequest, gen.CreateIngressResponse](
			httpClient,
			baseURL+IngressCreateIngressProcedure,
			connect.WithSchema(ingressMethods.ByName("CreateIngress")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ingressClient implements IngressClient.
type ingressClient struct {
	createIngress *connect.Client[gen.CreateIngressRequest, gen.CreateIngressResponse]
}

// CreateIngress calls proto.Ingress.CreateIngress.
func (c *ingressClient) CreateIngress(ctx context.Context, req *connect.Request[gen.CreateIngressRequest]) (*connect.Response[gen.CreateIngressResponse], error) {
	return c.createIngress.CallUnary(ctx, req)
}

// IngressHandler is an implementation of the proto.Ingress service.
type IngressHandler interface {
	CreateIngress(context.Context, *connect.Request[gen.CreateIngressRequest]) (*connect.Response[gen.CreateIngressResponse], error)
}

// NewIngressHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIngressHandler(svc IngressHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ingressMethods := gen.File_ingress_proto.Services().ByName("Ingress").Methods()
	ingressCreateIngressHandler := connect.NewUnaryHandler(
		IngressCreateIngressProcedure,
		svc.CreateIngress,
		connect.WithSchema(ingressMethods.ByName("CreateIngress")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.Ingress/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IngressCreateIngressProcedure:
			ingressCreateIngressHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIngressHandler returns CodeUnimplemented from all methods.
type UnimplementedIngressHandler struct{}

func (UnimplementedIngressHandler) CreateIngress(context.Context, *connect.Request[gen.CreateIngressRequest]) (*connect.Response[gen.CreateIngressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.Ingress.CreateIngress is not implemented"))
}
